// <auto-generated />
using System;
using GameStore.DAL.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GsDbContext))]
    [Migration("20250209090048_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameGameLabel", b =>
                {
                    b.Property<int>("GameLabelsId")
                        .HasColumnType("integer");

                    b.Property<long>("GamesId")
                        .HasColumnType("bigint");

                    b.HasKey("GameLabelsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameLabel");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GameGanresId")
                        .HasColumnType("integer");

                    b.Property<long>("GamesId")
                        .HasColumnType("bigint");

                    b.HasKey("GameGanresId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Dictionaries.GameDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries_GameDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rockstar Games"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Activision"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Microsoft Studios"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sony Interactive Entertainment"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Capcom"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sega"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bethesda Softworks"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Warner Bros. Interactive Entertainment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Take-Two Interactive"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Konami"
                        },
                        new
                        {
                            Id = 16,
                            Name = "11 Bit Studios"
                        },
                        new
                        {
                            Id = 17,
                            Name = "0verflow"
                        },
                        new
                        {
                            Id = 18,
                            Name = "1-Up Studio"
                        },
                        new
                        {
                            Id = 19,
                            Name = "2K Games"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Elemental Games"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Elite Systems"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Engine Software"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ensemble Studios"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Epicenter Studios"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Eric Barone"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Epyx"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ready At Dawn"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Red Entertainment"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Raven Software"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Techland"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Telltale Games"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Nintendo Software Technology"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Nippon Ichi Software"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Demiurge Studios"
                        },
                        new
                        {
                            Id = 35,
                            Name = "DeNA"
                        },
                        new
                        {
                            Id = 36,
                            Name = "DevCAT Studios"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Dhruva Interactive"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Die Gute Fabrik"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Digital Extremes"
                        },
                        new
                        {
                            Id = 40,
                            Name = "CD Projekt Red"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Dictionaries.GameKeyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries_GameKeyStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Активный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Забронирован"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Неактивный"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Dictionaries.GameLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries_GameLabels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PVE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PVP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Одиночная"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Co-op"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Dictionaries.GamePlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries_GamePlatforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Steam"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Epic Launcher"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Battle.net"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Origin"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Uplay"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rockstar Games Launcher"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Dictionaries.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries_Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Экшн"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Приключения"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ролевая игра (RPG)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Стратегия"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Симулятор"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Головоломка"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Драки"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Гонки"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Шутер"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Выживание"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Открытый мир"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Платформер"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ужасы"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Образовательная игра"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountSold")
                        .HasColumnType("bigint");

                    b.Property<string>("Cpu")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAddedSite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.Property<string>("Gpu")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Os")
                        .HasColumnType("text");

                    b.Property<byte[]>("Poster")
                        .HasColumnType("bytea");

                    b.Property<string>("PosterName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Ram")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("SharePrice")
                        .HasColumnType("numeric");

                    b.Property<byte[]>("SliderImg")
                        .HasColumnType("bytea");

                    b.Property<string>("SliderName")
                        .HasColumnType("text");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.Property<string>("YtLinkGameTrailer")
                        .HasColumnType("text");

                    b.Property<bool>("isShowInSlider")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Games_Games", (string)null);
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.GameKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<long?>("ShoppingCartId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("StatusId");

                    b.ToTable("Games_Keys", (string)null);
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.GameScreenshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Screenshot")
                        .HasColumnType("bytea");

                    b.Property<string>("ScreenshotName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Games_Screenshots", (string)null);
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<byte[]>("AvatarImage")
                        .HasColumnType("bytea");

                    b.Property<string>("AvatarName")
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<long>("CustomUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Identity.ShoppingCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users_ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = "user",
                            Name = "Пользователь",
                            NormalizedName = "ПОЛЬЗОВАТЕЛЬ"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameGameLabel", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Dictionaries.GameLabel", null)
                        .WithMany()
                        .HasForeignKey("GameLabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Games.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Dictionaries.Genre", null)
                        .WithMany()
                        .HasForeignKey("GameGanresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Games.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.Game", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Dictionaries.GameDeveloper", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.GameKey", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Games.Game", "Game")
                        .WithMany("GameKeys")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Dictionaries.GamePlatform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Identity.ShoppingCart", "ShoppingCart")
                        .WithMany("GamesKeys")
                        .HasForeignKey("ShoppingCartId");

                    b.HasOne("GameStore.DAL.Entities.Dictionaries.GameKeyStatus", "GameKeyStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameKeyStatus");

                    b.Navigation("Platform");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.GameScreenshot", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Games.Game", "Game")
                        .WithMany("Screenshots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Identity.ShoppingCart", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Identity.AppUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Games.Game", b =>
                {
                    b.Navigation("GameKeys");

                    b.Navigation("Screenshots");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Identity.ShoppingCart", b =>
                {
                    b.Navigation("GamesKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
